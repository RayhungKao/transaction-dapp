{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","props","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","TransactionContract","networks","instance","Contract","abi","address","setState","contract","trade","alert","error","handleInitBalance","e","state","initAddress","initBalance","methods","owner","call","initBalanceSheet","send","from","on","receipt","handleGetBalance","isSeller","sellerAddress","buyerAddress","balanceSheets","sellerBS","buyerBS","handleGetJournalEntry","txid","journalEntrys","response","item","cost","price","buyer","isBought","toString","isShipped","isReceived","handleSell","itemSale","costSale","priceSale","sell","handleBuy","buy","value","handleShip","ship","handleReceive","receiveGood","seller","balance","sellerBalance","BuyerBalance","bind","this","className","Container","Row","Form","Label","Group","Control","placeholder","onChange","target","Button","variant","onClick","Col","controlId","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df190011.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport TransactionContract from \"./contracts/Transaction.json\";\nimport getWeb3 from \"./getWeb3\";\nimport {Container, Button, Form, Row, Col} from 'react-bootstrap'\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      address: null,\n      balance: null,\n      sellerAddress: null,\n      buyerAddress: null,\n      sellerBalance: null,\n      BuyerBalance: null,\n      itemSale: null,\n      costSale: null,\n      priceSale: null,\n      item: null, \n      cost: null,\n      price: null, \n      txid: null,\n      buyer: null, \n      isBought: null,\n      isShipped: null,\n      isReceived: null,\n      web3: null, \n      accounts: null, \n      contract: null,\n      sellerBS: [],\n      buyerBS: []\n    };\n    this.handleSell = this.handleSell.bind(this);\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n    \n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = TransactionContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        TransactionContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.trade);\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  handleInitBalance = async (e) => {\n    const {accounts, contract, initAddress, initBalance} = this.state;\n\n    console.log(this.state);\n\n    const owner = await contract.methods.owner().call();\n    console.log(owner);\n\n    await contract.methods.initBalanceSheet(initAddress, initBalance)\n      .send({ from: accounts[0] })\n      .on('receipt', (receipt) => {\n        console.log(\"result: \", receipt)\n      })\n      .on('error', console.error);\n  }\n\n  handleGetBalance = async (e, isSeller) => {\n    const {contract, sellerAddress, buyerAddress} = this.state;\n\n    console.log(this.state);\n\n    if (isSeller === true) {\n      // // Get the value from the contract to prove it worked.\n      const sellerBS = await contract.methods.balanceSheets(sellerAddress).call();\n      await this.setState({sellerBS: sellerBS});\n      console.log(sellerBS);\n    }\n    else { // Get the value from the contract to prove it worked.\n      const buyerBS = await contract.methods.balanceSheets(buyerAddress).call();\n      await this.setState({buyerBS: buyerBS});\n      console.log(buyerBS);\n    }\n  }\n\n  handleGetJournalEntry = async (e) => {\n    const {contract, txid} = this.state;\n\n    console.log(this.state);\n\n    const response = await contract.methods.journalEntrys(txid).call();\n    await this.setState({\n      item: response['item'],\n      cost: response['cost'],\n      price: response['price'],\n      buyer: response['buyer'],\n      isBought: response['isBought'].toString(),\n      isShipped: response['isShipped'].toString(),\n      isReceived: response['isReceived'].toString()\n    });\n    console.log(response);\n  }\n\n  handleSell = async (e) => {\n    const {itemSale, costSale, priceSale, accounts, contract } = this.state;\n    console.log(this.state);\n    console.log(accounts[0]);\n\n    // Stores value to the contract\n    await contract.methods.sell(itemSale, costSale, priceSale)\n      .send({ from: accounts[0] })\n      .on('receipt', (receipt) => {\n        console.log('this should be executed now')\n        console.log(\"result: \", receipt)\n        console.log(\"Value submitted on blockchain!\")\n      })\n      .on('error', console.error);\n    \n  }\n\n  handleBuy = async (e) => {\n    const {accounts, contract, price, txid} = this.state;\n\n    console.log(this.state);\n\n    // const priceToWei = price*(10**18);\n    // console.log(price);\n    // console.log(priceToWei);\n\n    // // // Stores value to the contract\n    await contract.methods.buy(txid)\n      .send({ from: accounts[0], value: price })\n      .on('receipt', (receipt) => {\n        console.log('this should be executed now')\n        console.log(\"result: \", receipt)\n        console.log(\"Value submitted on blockchain!\")\n      })\n      .on('error', console.error);\n\n    // Update Real-time Product Status to check it worked.\n    const response = await contract.methods.journalEntrys(txid).call();\n    await this.setState({\n      item: response['item'],\n      cost: response['cost'],\n      price: response['price'],\n      buyer: response['buyer'],\n      isBought: response['isBought'].toString(),\n      isShipped: response['isShipped'].toString(),\n      isReceived: response['isReceived'].toString()\n    });\n    console.log(response);\n\n    // Update Buyer's Balance Sheet to check it worked.\n    const buyerBS = await contract.methods.balanceSheets(accounts[0]).call();\n    await this.setState({buyerBS: buyerBS});\n    console.log(buyerBS);\n  }\n\n  handleShip = async (e) => {\n    const {accounts, contract, txid} = this.state;\n\n    console.log(this.state);\n\n    // // // Stores value to the contract\n    await contract.methods.ship(txid)\n      .send({ from: accounts[0] })\n      .on('receipt', (receipt) => {\n        console.log('this should be executed now')\n        console.log(\"result: \", receipt)\n        console.log(\"Value submitted on blockchain!\")\n      })\n      .on('error', console.error);\n\n    // Update Real-time Product Status to check it worked.\n    const response = await contract.methods.journalEntrys(txid).call();\n    await this.setState({\n      item: response['item'],\n      cost: response['cost'],\n      price: response['price'],\n      buyer: response['buyer'],\n      isBought: response['isBought'].toString(),\n      isShipped: response['isShipped'].toString(),\n      isReceived: response['isReceived'].toString()\n    });\n    console.log(response);\n\n    // Update Seller's Balance Sheet to check it worked.\n    const sellerBS = await contract.methods.balanceSheets(accounts[0]).call();\n    await this.setState({sellerBS: sellerBS});\n    console.log(sellerBS);\n  }\n\n  handleReceive = async (e) => {\n    const {accounts, contract, txid} = this.state;\n\n    console.log(this.state);\n\n    // // // Stores value to the contract\n    await contract.methods.receiveGood(txid)\n      .send({ from: accounts[0] })\n      .on('receipt', (receipt) => {\n        console.log('this should be executed now')\n        console.log(\"result: \", receipt)\n        console.log(\"Value submitted on blockchain!\")\n      })\n      .on('error', console.error);\n\n    // Update Real-time Product Status to check it worked.\n    const response = await contract.methods.journalEntrys(txid).call();\n    await this.setState({\n      item: response['item'],\n      cost: response['cost'],\n      price: response['price'],\n      buyer: response['buyer'],\n      isBought: response['isBought'].toString(),\n      isShipped: response['isShipped'].toString(),\n      isReceived: response['isReceived'].toString()\n    });\n    console.log(response);\n\n    // Update Seller's Balance Sheet to check it worked.\n    const sellerAddress = await contract.methods.seller().call();\n    await this.setState({sellerAddress: sellerAddress});\n\n    const sellerBS = await contract.methods.balanceSheets(this.state.sellerAddress).call();\n    await this.setState({sellerBS: sellerBS});\n    console.log(sellerBS);\n\n    // Update Buyer's Balance Sheet to check it worked.\n    const buyerBS = await contract.methods.balanceSheets(accounts[0]).call();\n    await this.setState({buyerBS: buyerBS});\n    console.log(buyerBS);\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Transaction Dapp</h1>\n        <div>The current user is: {this.state.accounts}</div>\n        <br />\n        <Container>\n          <Row>\n            <Form>\n              <Form.Label>Initialize balance sheet (*Contract owner only)</Form.Label>\n              <Form.Group className=\"mb-1\">\n                <Form.Control placeholder=\"Address\" onChange={(e) => this.setState({initAddress: e.target.value})}/>\n              </Form.Group>\n              <Form.Group className=\"mb-1\">\n                <Form.Control placeholder=\"Balance\" onChange={(e) => this.setState({initBalance: e.target.value})}/>\n              </Form.Group>\n              <Button variant=\"info\" /*type=\"submit\"*/ onClick={(e) => this.handleInitBalance(e) }>Init Balance</Button>\n            </Form>\n          </Row>\n        </Container>\n        <br></br>\n        <Container>\n          <Row>\n            <Col>\n              <h4>Seller</h4>\n              <Form>\n                <Form.Group className=\"mb-1\">\n                  <Form.Control placeholder=\"Address\" onChange={(e) => this.setState({sellerAddress: e.target.value})}/>\n                </Form.Group>\n                <Button variant=\"info\" /*type=\"submit\"*/ onClick={(e) => this.handleGetBalance(e, true) }>Get Balance Sheet</Button>\n              </Form>\n              <Row>\n                <Col> Cash: </Col>\n                <Col> {this.state.sellerBS['CashAccount']} </Col>\n              </Row>\n              <Row>\n                <Col> AR: </Col>\n                <Col> {this.state.sellerBS['ARAccount']} </Col>\n              </Row>\n              <Row>\n                <Col> Inventory: </Col>\n                <Col> {this.state.sellerBS['InventoryAccount']} </Col>\n              </Row>\n              <Row>\n                <Col> CoGS: </Col>\n                <Col> {this.state.sellerBS['CoGSAccount']} </Col>\n              </Row>\n              <Row>\n                <Col> Sales: </Col>\n                <Col> {this.state.sellerBS['SalesAccount']} </Col>\n              </Row>\n            </Col>\n            <Col>\n              <h4>Buyer</h4>\n              <Form>\n                <Form.Group className=\"mb-1\">\n                  <Form.Control placeholder=\"Address\" onChange={(e) => this.setState({buyerAddress: e.target.value})}/>\n                </Form.Group>\n                <Button variant=\"info\" /*type=\"submit\"*/ onClick={(e) => this.handleGetBalance(e, false) }>Get Balance Sheet</Button>\n              </Form>\n              <Row>\n                <Col> Cash: </Col>\n                <Col> {this.state.buyerBS['CashAccount']} </Col>\n              </Row>\n              <Row>\n                <Col> AR: </Col>\n                <Col> {this.state.buyerBS['ARAccount']} </Col>\n              </Row>\n              <Row>\n                <Col> Inventory: </Col>\n                <Col> {this.state.buyerBS['InventoryAccount']} </Col>\n              </Row>\n              <Row>\n                <Col> CoGS: </Col>\n                <Col> {this.state.buyerBS['CoGSAccount']} </Col>\n              </Row>\n              <Row>\n                <Col> Sales: </Col>\n                <Col> {this.state.buyerBS['SalesAccount']} </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n        <br></br>\n\n        <Container>\n          <Form>\n            <Form.Label>Product info (*become a seller)</Form.Label>\n            <Form.Group className=\"mb-1\" controlId=\"formBasicItem\">\n              <Form.Control placeholder=\"Item to be sold\" onChange={(e) => this.setState({itemSale: e.target.value}) }/>\n            </Form.Group>\n            <Form.Group className=\"mb-1\" controlId=\"formBasicCost\">\n              <Form.Control placeholder=\"Cost\" onChange={(e) => this.setState({costSale: e.target.value}) } />\n            </Form.Group>\n            <Form.Group className=\"mb-1\" controlId=\"formBasicPrice\" onChange={(e) => this.setState({priceSale: e.target.value}) } >\n              <Form.Control placeholder=\"Price\" />\n            </Form.Group>\n            <Button variant=\"primary\" /*type=\"submit\"*/ onClick={(e) => this.handleSell(e) }>On sale</Button>\n          </Form>\n          <br />\n          <Row>\n            <Col>\n              <h4>Real-time Product Status</h4>\n              <Row>\n                <Col>tx index:</Col>\n                <Col>\n                  <Form.Group className=\"mb-1\" controlId=\"formBasicItem\">\n                    <Form.Control placeholder=\"index\" onChange={(e) => this.setState({txid: e.target.value}) }/>\n                  </Form.Group>\n                  <Button variant=\"primary\" /*type=\"submit\"*/ onClick={(e) => this.handleGetJournalEntry(e) }>Retrieve</Button>\n                </Col>\n              </Row>\n              <Row>\n                <Col> item: </Col>\n                <Col> {this.state.item} </Col>\n              </Row>\n              <Row>\n                <Col> cost: </Col>\n                <Col> {this.state.cost} </Col>\n              </Row>\n              <Row>\n                <Col> price: </Col>\n                <Col> {this.state.price} </Col>\n              </Row>\n              <Row>\n                <Col> buyer: </Col>\n                <Col> {this.state.buyer} </Col>\n              </Row>\n              <Row>\n                <Col> isBought: </Col>\n                <Col> {this.state.isBought} </Col>\n              </Row>\n              <Row>\n                <Col> isShipped: </Col>\n                <Col> {this.state.isShipped} </Col>\n              </Row>\n              <Row>\n                <Col> isReceived: </Col>\n                <Col> {this.state.isReceived} </Col>\n              </Row>\n            </Col>\n            <Col>\n              <br />Buy this?\n              <br />\n              <Button variant=\"success\" onClick={(e) => this.handleBuy(e) }>Buy</Button>\n              <br />\n              <br />Ship this? (*seller only)\n              <br />\n              <Button variant=\"primary\" onClick={(e) => this.handleShip(e) }>Ship</Button>\n              <br />\n              <br />Receive this (*buyer only)\n              <br />\n              <Button variant=\"success\" onClick={(e) => this.handleReceive(e) }>Receive</Button>\n              <br />\n              <br />\n            </Col>\n          </Row>\n          <br />\n          <br />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}